openapi: 3.0.0
paths:
  /api:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
  /api/users/additional:
    get:
      operationId: UserController_getAdditionalInfo
      summary: Return additional info about availible genders, locations, training
        types and training durations
      parameters: []
      responses:
        "200":
          description: Additional info found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalInfoRDO"
        "500":
          description: Can`t found additional info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalInfoRDO"
      tags: &a1
        - users
  /api/users/register:
    post:
      operationId: UserController_create
      summary: Register new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
      responses:
        "201":
          description: User has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "409":
          description: User with passed email already exists
      tags: *a1
  /api/users/login:
    post:
      operationId: UserController_login
      summary: Login user by passed credentials
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserDTO"
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "401":
          description: Incorrect user email/password
      tags: *a1
  /api/users:
    get:
      operationId: UserController_show
      summary: Get detail info about user
      parameters: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "404":
          description: User not found
      tags: *a1
    patch:
      operationId: UserController_updateUser
      summary: Update user info
      parameters: []
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "400":
          description: "Can`t update user. Possible reason: Object with fields to update
            are empty"
      tags: *a1
  /api/users/{userId}:
    delete:
      operationId: UserController_deleteUser
      summary: Delete user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: User has been successfully deleted
      tags: *a1
  /api/users/check:
    post:
      operationId: UserController_checkToken
      summary: Check user`s JWT-Token
      parameters: []
      responses:
        "201":
          description: ""
      tags: *a1
  /api/users/refresh:
    post:
      operationId: UserController_refreshToken
      summary: Refresh JWT-Tokens pair by refresh token
      parameters: []
      responses:
        "200":
          description: Successfully get a new access/refresh tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
        "500":
          description: Can`t get get a new access/refresh tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRDO"
      tags: *a1
  /api/files/upload:
    post:
      operationId: FileVaultController_uploadFile
      parameters: []
      responses:
        "201":
          description: ""
      tags:
        - files
  /api/trainings:
    post:
      operationId: TrainingController_create
      summary: Add new training
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrainingDTO"
      responses:
        "201":
          description: Training has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTrainingDTO"
      tags: &a2
        - trainings
    get:
      operationId: TrainingController_index
      summary: Get trainings list by passed params (or without it)
      parameters:
        - name: sortDirection
          required: false
          in: query
          description: "Sorting direction. Default direction: desc"
          example: " desc"
          schema:
            enum:
              - asc
              - desc
            type: string
        - name: sortType
          required: false
          in: query
          description: "Sorting type. Default sort type: createdAt"
          example: createdAt
          schema:
            enum:
              - createdAt
              - price
              - calories
              - rating
              - type
            type: string
        - name: page
          required: false
          in: query
          description: 'Current page in pagination (if items count more than "limit").
            Default page: 1'
          example: "1"
          schema: {}
        - name: limit
          required: false
          in: query
          description: "Items per page (pagination). Max limit: 50"
          example: "50"
          schema: {}
        - name: createdAt
          required: false
          in: query
          description: Item's creation date
          example: 2024-05-29
          schema: {}
        - name: userId
          required: false
          in: query
          description: Creator id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          schema: {}
        - name: ratingTo
          required: false
          in: query
          description: Rating end value
          example: 5
          schema: {}
        - name: ratingFrom
          required: false
          in: query
          description: Rating start value
          example: 1
          schema: {}
        - name: caloriesTo
          required: false
          in: query
          description: Calories end value
          example: 2200
          schema: {}
        - name: caloriesFrom
          required: false
          in: query
          description: Calories start value
          example: 1000
          schema: {}
        - name: priceTo
          required: false
          in: query
          description: Price end value
          example: 5000
          schema: {}
        - name: priceForm
          required: false
          in: query
          description: Price start value
          example: 1000
          schema: {}
        - name: gender
          required: false
          in: query
          description: Gender for who this training
          example: мужской
          schema:
            enum:
              - мужской
              - женский
              - неважно
            type: string
        - name: trainingType
          required: false
          in: query
          description: Training type  (or types array)
          example: кроссфит
          schema:
            enum:
              - йога
              - бег
              - бокс
              - стрейчинг
              - кроссфит
              - аэробика
              - пилатес
            type: string
        - name: title
          required: false
          in: query
          description: Training title
          example: Run, Forest, run
          schema: {}
      responses:
        "200":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingsWithPaginationRDO"
        "404":
          description: Training not found
      tags: *a2
  /api/trainings/convenient-trainings:
    get:
      operationId: TrainingController_getTrainingsForUser
      summary: Get convenient trainings for user by quiz params
      parameters: []
      responses:
        "200":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingsWithPaginationRDO"
        "404":
          description: Training not found
      tags: *a2
  /api/trainings/with-discount:
    get:
      operationId: TrainingController_getTrainigsWithDiscount
      summary: Get trainings with discount
      parameters: []
      responses:
        "200":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingsWithPaginationRDO"
        "404":
          description: Training not found
      tags: *a2
  /api/trainings/with-rating:
    get:
      operationId: TrainingController_getTrainigsWithRating
      summary: Get trainings with rating more than 0
      parameters: []
      responses:
        "200":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingsWithPaginationRDO"
        "404":
          description: Training not found
      tags: *a2
  /api/trainings/filter-params:
    get:
      operationId: TrainingController_getTrainingFIlterParams
      summary: Get params for training filter
      parameters: []
      responses:
        "200":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingFilterParamsRDO"
        "404":
          description: Training not found
      tags: *a2
  /api/trainings/{trainingId}:
    get:
      operationId: TrainingController_show
      summary: Get detail info about training
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Training found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTrainingRDO"
        "404":
          description: Training not found
      tags: *a2
    patch:
      operationId: TrainingController_updateTraining
      summary: Update training info
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrainingDTO"
      responses:
        "201":
          description: Training has been successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTrainingRDO"
        "400":
          description: "Can`t update Training. Possible reason: Object with fields to
            update are empty"
      tags: *a2
    delete:
      operationId: TrainingController_deleteTraining
      summary: Delete training
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Training has been successfully deleted
      tags: *a2
  /api/training-reviews/{trainingId}:
    get:
      operationId: TrainingReviewController_index
      summary: Get reviews list by passed params (or without it)
      parameters:
        - name: sortDirection
          required: false
          in: query
          description: "Sorting direction. Default direction: desc"
          example: " desc"
          schema:
            enum:
              - asc
              - desc
            type: string
        - name: sortType
          required: false
          in: query
          description: "Sorting type. Default sort type: createdAt"
          example: createdAt
          schema:
            enum:
              - createdAt
            type: string
        - name: page
          required: false
          in: query
          description: 'Current page in pagination (if items count more than "limit").
            Default page: 1'
          example: "1"
          schema: {}
        - name: limit
          required: false
          in: query
          description: "Items per page (pagination). Max limit: 50"
          example: "50"
          schema: {}
        - name: createdAt
          required: false
          in: query
          description: Item's creation date
          example: 2024-05-29
          schema: {}
      responses:
        "200":
          description: ""
      tags: &a3
        - training-reviews
    post:
      operationId: TrainingReviewController_create
      summary: Add new review to training
      parameters:
        - name: Training id
          required: true
          in: query
          description: Correct training id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrainingReviewDTO"
      responses:
        "201":
          description: Review has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTrainingReviewRDO"
      tags: *a3
  /api/training-reviews/{trainingId}/{reviewId}:
    patch:
      operationId: TrainingReviewController_update
      summary: Update training review
      parameters:
        - name: reviewId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrainingReviewDTO"
      responses:
        "201":
          description: Review has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTrainingReviewRDO"
        "400":
          description: "Can`t update review. Possible reason: Object with fields to update
            are empty"
      tags: *a3
    delete:
      operationId: TrainingReviewController_delete
      summary: Delete training review
      parameters:
        - name: reviewId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Review has been successfully deleted
      tags: *a3
  /api/orders:
    post:
      operationId: OrderController_create
      summary: Add new order
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderDTO"
      responses:
        "201":
          description: Order has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrderDTO"
      tags: &a4
        - orders
    get:
      operationId: OrderController_index
      summary: Get orders list by passed params (or without it)
      parameters:
        - name: sortDirection
          required: false
          in: query
          description: "Sorting direction. Default direction: desc"
          example: " desc"
          schema:
            enum:
              - asc
              - desc
            type: string
        - name: sortType
          required: false
          in: query
          description: "Sorting type. Default sort type: createdAt"
          example: createdAt
          schema:
            enum:
              - createdAt
            type: string
        - name: page
          required: false
          in: query
          description: 'Current page in pagination (if items count more than "limit").
            Default page: 1'
          example: "1"
          schema: {}
        - name: limit
          required: false
          in: query
          description: "Items per page (pagination). Max limit: 50"
          example: "50"
          schema: {}
        - name: createdAt
          required: false
          in: query
          description: Item's creation date
          example: 2024-05-29
          schema: {}
        - name: trainingId
          required: false
          in: query
          description: Orders by training id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          schema: {}
        - name: trainerId
          required: false
          in: query
          description: Trainer's orders
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          schema: {}
        - name: userId
          required: false
          in: query
          description: Creator id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          schema: {}
      responses:
        "200":
          description: ""
      tags: *a4
  /api/orders/{orderId}:
    get:
      operationId: OrderController_show
      summary: Get detail info about order
      parameters:
        - name: orderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Order found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrderRDO"
        "404":
          description: Orders not found
      tags: *a4
    patch:
      operationId: OrderController_updateTraining
      summary: Update order info
      parameters:
        - name: orderId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderDTO"
      responses:
        "201":
          description: Order has bees successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrderRDO"
        "400":
          description: "Can`t update order. Possible reason: Object with fields to update
            are empty"
      tags: *a4
    delete:
      operationId: OrderController_deleteOrder
      summary: Delete order
      parameters:
        - name: orderId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Order has been successfully deleted
      tags: *a4
  /api/balance:
    post:
      operationId: BalanceController_create
      summary: Add new balance
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBalanceDTO"
      responses:
        "201":
          description: Balance has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBalanceDTO"
      tags: &a5
        - balance
    get:
      operationId: BalanceController_index
      summary: Get user`s training balance
      parameters:
        - name: sortDirection
          required: false
          in: query
          description: "Sorting direction. Default direction: desc"
          example: " desc"
          schema:
            enum:
              - asc
              - desc
            type: string
        - name: sortType
          required: false
          in: query
          description: "Sorting type. Default sort type: createdAt"
          example: createdAt
          schema:
            enum:
              - createdAt
            type: string
        - name: page
          required: false
          in: query
          description: 'Current page in pagination (if items count more than "limit").
            Default page: 1'
          example: "1"
          schema: {}
        - name: limit
          required: false
          in: query
          description: "Items per page (pagination). Max limit: 50"
          example: "50"
          schema: {}
        - name: createdAt
          required: false
          in: query
          description: Item's creation date
          example: 2024-05-29
          schema: {}
      responses:
        "200":
          description: Balance found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CreateBalanceRDO"
        "404":
          description: Balance not found
      tags: *a5
  /api/balance/by-training/{trainingId}:
    get:
      operationId: BalanceController_getUserBalance
      summary: Get user`s balance by training id
      parameters:
        - name: trainingId
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Balance has been successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBalanceDTO"
      tags: *a5
  /api/balance/count:
    get:
      operationId: BalanceController_countBalance
      summary: Get summary user`s balance
      parameters: []
      responses:
        "200":
          description: Balance found
          content:
            application/json:
              schema:
                type: number
        "404":
          description: Balance not found
      tags: *a5
  /api/balance/increase:
    patch:
      operationId: BalanceController_increaseBalance
      summary: Increase training balance by passed amount
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeBalanceDTO"
      responses:
        "200":
          description: Balance found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBalanceRDO"
        "404":
          description: Balance not found
      tags: *a5
  /api/balance/decrease:
    patch:
      operationId: BalanceController_decreaseBalance
      summary: Decrease training balance by passed amount
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeBalanceDTO"
      responses:
        "200":
          description: Balance found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBalanceRDO"
        "404":
          description: Balance not found
      tags: *a5
  /api/balance/{balanceId}:
    patch:
      operationId: BalanceController_update
      summary: Update balance info
      parameters:
        - name: balanceId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBalanceDTO"
      responses:
        "201":
          description: Balance has bees successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBalanceRDO"
        "400":
          description: "Can`t update order. Possible reason: Object with fields to update
            are empty"
      tags: *a5
    delete:
      operationId: BalanceController_deleteOrder
      summary: Delete balance
      parameters:
        - name: balanceId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Balance has been successfully deleted
      tags: *a5
info:
  title: The "Fit-Friends" service
  description: '"FIt-Friends" service API'
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    AdditionalInfoRDO:
      type: object
      properties: {}
    CreateUserDTO:
      type: object
      properties:
        name:
          type: string
          description: User name
          example: Tony
          minimum: 1
          maximum: 15
        email:
          type: string
          description: User email
          example: iron-man@starkindustries.it
        avatar:
          type: object
          description: User avatar
          example: some/interesting/avatar.jpg
        password:
          type: string
          description: User password
          example: jarvis-iron-hearth123
          minimum: 12
          maximum: 6
        role:
          type: string
          description: User role
          example: admin
          enum:
            - admin
            - client
            - trainer
        gender:
          type: string
          description: User gender
          example: мужской
          enum:
            - мужской
            - женский
            - неважно
        birthDate:
          format: date-time
          type: string
          description: User birth date
          example: 1993-09-26
        description:
          format: date-time
          type: string
          description: User profile description
          example: Some interesting profile description
        location:
          type: string
          description: User metro station
          example: звездная
          enum:
            - пионерская
            - петроградская
            - удельная
            - звездная
            - спортивная
        pageBackground:
          type: object
          description: User profile background. If not passed = User avatar
          example: some/interesting/avatar.jpg
        level:
          type: string
          description: User training level
          example: новичок
          enum:
            - новичок
            - любитель
            - профессионал
        trainingType:
          type: string
          description: User trainings type
          example: '["бокс", "кроссфит", "бег"]'
          enum:
            - йога
            - бег
            - бокс
            - стрейчинг
            - кроссфит
            - аэробика
            - пилатес
        trainingDuration:
          type: string
          description: User training time periods (duration in minutes)
          example: 10-30
          enum:
            - 10-30
            - 30-50
            - 50-80
            - 80-100
        loseCaloriesLimit:
          type: number
          description: User lose calories aim
          example: 1000
          minimum: 1000
          maximum: 5000
        dayCaloriesLimit:
          type: number
          description: User calories per day limit
          example: "5000"
          minimum: 1000
          maximum: 5000
        isReadyToTraining:
          type: boolean
          description: Is user ready to training
          example: "true"
      required:
        - name
        - email
        - avatar
        - password
        - role
        - gender
        - birthDate
        - description
        - location
        - pageBackground
        - level
        - trainingType
        - trainingDuration
        - loseCaloriesLimit
        - dayCaloriesLimit
        - isReadyToTraining
    UserRDO:
      type: object
      properties:
        id:
          type: string
          description: Uniq user ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        createdAt:
          format: date-time
          type: string
          description: Created at date
          example: 2024-04-26 13:02:24.847
        updatedAt:
          format: date-time
          type: string
          description: Updated at date
          example: 2024-04-26 13:02:24.847
        name:
          type: string
          description: User name
          example: Tony
          minimum: 1
          maximum: 15
        email:
          type: string
          description: User email
          example: iron-man@starkindustries.it
        avatar:
          type: string
          description: User avatar
          example: some/interesting/avatar.jpg
        role:
          type: string
          description: User role
          example: admin
        gender:
          type: string
          description: User gender
          example: мужской
          enum:
            - мужской
            - женский
            - неважно
        birthDate:
          format: date-time
          type: string
          description: User birth date
          example: 26.09.1993
        description:
          type: string
          description: User profile description
          example: Some interesting profile description
        location:
          type: string
          description: User metro station
          example: звездная
          enum:
            - пионерская
            - петроградская
            - удельная
            - звездная
            - спортивная
        pageBackground:
          type: string
          description: User profile background. If not passed = User avatar
          example: some/interesting/avatar.jpg
        level:
          type: string
          description: User training level
          example: новичок
          enum:
            - новичок
            - любитель
            - профессионал
        trainingType:
          type: string
          description: User trainings type
          example: '["box", "crossfit", "running"]'
          enum:
            - йога
            - бег
            - бокс
            - стрейчинг
            - кроссфит
            - аэробика
            - пилатес
        trainingDuration:
          type: string
          description: User training time periods (in minutes)
          example: 10-30
          enum:
            - 10-30
            - 30-50
            - 50-80
            - 80-100
        loseCaloriesLimit:
          type: number
          description: User lose calories aim
          example: "1000"
          minimum: 1000
          maximum: 5000
        dayCaloriesLimit:
          type: number
          description: User calories per day limit
          example: "5000"
          minimum: 1000
          maximum: 5000
        isReadyToTraining:
          type: boolean
          description: Is user ready to training
          example: "true"
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - email
        - avatar
        - role
        - gender
        - birthDate
        - description
        - location
        - pageBackground
        - level
        - trainingType
        - trainingDuration
        - loseCaloriesLimit
        - dayCaloriesLimit
        - isReadyToTraining
    LoginUserDTO:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: iron-man@starkindustries.it
        password:
          type: string
          description: User password
          example: jarvis-iron-hearth123
          minimum: 12
          maximum: 6
      required:
        - email
        - password
    CreateTrainingDTO:
      type: object
      properties:
        title:
          type: string
          description: Training title
          example: Fat Burner
          minimum: 1
          maximum: 15
        background:
          type: string
          description: User profile background. If not passed = User avatar
          example: some/interesting/avatar.jpg
        userLevel:
          type: string
          description: Training level, that user have to have for this
          example: новичок
          enum:
            - новичок
            - любитель
            - профессионал
        trainingType:
          type: string
          description: Training type
          example: кроссфит
          enum:
            - йога
            - бег
            - бокс
            - стрейчинг
            - кроссфит
            - аэробика
            - пилатес
        trainingDuration:
          type: string
          description: User training time periods (duration in minutes)
          example: 10-30
          enum:
            - 10-30
            - 30-50
            - 50-80
            - 80-100
        price:
          type: number
          description: Training price
          example: 1522
          minimum: 0
        discount:
          type: number
          description: Discount value
          example: 522
        calories:
          type: number
          description: Calories count to lose with this training
          example: 1000
          minimum: 1000
          maximum: 5000
        description:
          type: string
          description: Training description
          example: Some interesting training description
        gender:
          type: string
          description: Gender for who this training
          example: мужской
          enum:
            - мужской
            - женский
            - неважно
        video:
          type: string
          description: Training video
          example: some/interesting/video.avi
        rating:
          type: number
          description: Training rating
          example: 0
          minimum: 0
          maximum: 5
        trainersName:
          type: string
          description: Training creator`s name
          example: Tony Stark
        isSpecial:
          type: boolean
          description: Is special offer or simple training
          example: false
        userId:
          type: string
          description: Training creator`s ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
      required:
        - title
        - background
        - userLevel
        - trainingType
        - trainingDuration
        - price
        - discount
        - calories
        - description
        - gender
        - video
        - rating
        - trainersName
        - isSpecial
        - userId
    CreateTrainingRDO:
      type: object
      properties:
        id:
          type: string
          description: Uniq training ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        createdAt:
          format: date-time
          type: string
          description: Created at date
          example: 2024-04-26 13:02:24.847
        updatedAt:
          format: date-time
          type: string
          description: Updated at date
          example: 2024-04-26 13:02:24.847
        title:
          type: string
          description: Training title
          example: Fat Burner
          minimum: 1
          maximum: 15
        background:
          type: string
          description: User profile background. If not passed = User avatar
          example: some/interesting/avatar.jpg
        userLevel:
          type: string
          description: Training level, that user have to have for this
          example: новичок
          enum:
            - новичок
            - любитель
            - профессионал
        trainingType:
          type: string
          description: Training type
          example: кроссфит
          enum:
            - йога
            - бег
            - бокс
            - стрейчинг
            - кроссфит
            - аэробика
            - пилатес
        trainingDuration:
          type: string
          description: User training time periods (duration in minutes)
          example: 10-30
          enum:
            - 10-30
            - 30-50
            - 50-80
            - 80-100
        price:
          type: number
          description: Training price
          example: 1522
          minimum: 0
        discount:
          type: number
          description: Discount value
          example: 522
        calories:
          type: number
          description: Calories count to lose with this training
          example: 1000
          minimum: 1000
          maximum: 5000
        description:
          type: string
          description: Training description
          example: Some interesting training description
        gender:
          type: string
          description: Gender for who this training
          example: мужской
          enum:
            - мужской
            - женский
            - неважно
        video:
          type: string
          description: Training video
          example: some/interesting/video.avi
        rating:
          type: number
          description: Training rating
          example: 0
        trainersName:
          type: string
          description: Training creator`s name
          example: Tony Stark
        userId:
          type: string
          description: Training creator`s ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        userInfo:
          description: Training creator`s detail info
          allOf:
            - $ref: "#/components/schemas/UserRDO"
        isSpecial:
          type: boolean
          description: Is special offer or simple training
          example: false
      required:
        - id
        - createdAt
        - updatedAt
        - title
        - background
        - userLevel
        - trainingType
        - trainingDuration
        - price
        - discount
        - calories
        - description
        - gender
        - video
        - rating
        - trainersName
        - userId
        - userInfo
        - isSpecial
    TrainingsWithPaginationRDO:
      type: object
      properties:
        totalPages:
          type: number
          description: Paginated item pages count
          example: 2
        totalItems:
          type: number
          description: Total items count
          example: 23
        currentPage:
          type: number
          description: Current page number in pagination
          example: 1
        itemsPerPage:
          type: number
          description: items per page
          example: 7
        entities:
          description: Item entities array
          allOf:
            - $ref: "#/components/schemas/CreateTrainingRDO"
      required:
        - totalPages
        - totalItems
        - currentPage
        - itemsPerPage
        - entities
    TrainingFilterParamsRDO:
      type: object
      properties:
        price:
          type: object
          description: Training min/max price
          example: "price: {       min: 1800;      max: 2900;    }"
        calories:
          type: object
          description: Training min/max calories
          example: "price: {       min: 2100;      max: 3300;    }"
      required:
        - price
        - calories
    UpdateTrainingDTO:
      type: object
      properties:
        title:
          type: string
          description: Training title
          example: Fat Burner
          minimum: 1
          maximum: 15
        background:
          type: string
          description: User profile background. If not passed = User avatar
          example: some/interesting/avatar.jpg
        userLevel:
          type: string
          description: Training level, that user have to have for this
          example: новичок
          enum:
            - новичок
            - любитель
            - профессионал
        trainingType:
          type: string
          description: Training type
          example: кроссфит
          enum:
            - йога
            - бег
            - бокс
            - стрейчинг
            - кроссфит
            - аэробика
            - пилатес
        trainingDuration:
          type: string
          description: User training time periods (duration in minutes)
          example: 10-30
          enum:
            - 10-30
            - 30-50
            - 50-80
            - 80-100
        price:
          type: number
          description: Training price
          example: 1522
          minimum: 0
        discount:
          type: number
          description: Discount value
          example: 522
        calories:
          type: number
          description: Calories count to lose with this training
          example: 1000
          minimum: 1000
          maximum: 5000
        description:
          type: string
          description: Training description
          example: Some interesting training description
        gender:
          type: string
          description: Gender for who this training
          example: мужской
          enum:
            - мужской
            - женский
            - неважно
        video:
          type: string
          description: Training video
          example: some/interesting/video.avi
        rating:
          type: number
          description: Training rating
          example: 0
        trainersName:
          type: string
          description: Training creator`s name
          example: Tony Stark
        userId:
          type: string
          description: Training creator`s ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        isSpecial:
          type: boolean
          description: Is special offer or simple training
          example: false
      required:
        - title
        - background
        - userLevel
        - trainingType
        - trainingDuration
        - price
        - discount
        - calories
        - description
        - gender
        - video
        - rating
        - trainersName
        - userId
        - isSpecial
    CreateTrainingReviewDTO:
      type: object
      properties:
        userId:
          type: object
          description: Review author id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        trainingId:
          type: object
          description: Training id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        rating:
          type: number
          description: Author`s training rate
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          minimum: 1
          maximum: 5
        text:
          type: string
          description: Author review`s text
          example: it was amazing training
      required:
        - userId
        - trainingId
        - rating
        - text
    CreateTrainingReviewRDO:
      type: object
      properties:
        id:
          type: string
          description: Uniq review ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        createdAt:
          format: date-time
          type: string
          description: Created at date
          example: 2024-04-26 13:02:24.847
        updatedAt:
          format: date-time
          type: string
          description: Updated at date
          example: 2024-04-26 13:02:24.847
        userId:
          type: object
          description: Review author id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        trainingId:
          type: object
          description: Training id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        rating:
          type: number
          description: Author`s training rate
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          minimum: 1
          maximum: 5
        text:
          type: string
          description: Author review`s text
          example: it was amazing training
        userInfo:
          description: Review`s author additional info
          allOf:
            - $ref: "#/components/schemas/UserRDO"
      required:
        - id
        - createdAt
        - updatedAt
        - userId
        - trainingId
        - rating
        - text
        - userInfo
    UpdateTrainingReviewDTO:
      type: object
      properties:
        userId:
          type: object
          description: Review author id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        trainingId:
          type: object
          description: Training id
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        rating:
          type: number
          description: Author`s training rate
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
          minimum: 1
          maximum: 5
        text:
          type: string
          description: Author review`s text
          example: it was amazing training
      required:
        - userId
        - trainingId
        - rating
        - text
    CreateOrderDTO:
      type: object
      properties:
        type:
          type: string
          description: Order type
          example: абонемент
          enum:
            - абонемент
        trainingId:
          type: object
          description: Training ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        trainingsCount:
          type: number
          description: Trainings count
          example: 15
          minimum: 1
          maximum: 50
        paymentType:
          type: string
          description: Payment type
          example: mir
          enum:
            - visa
            - mir
            - iomoney
        userId:
          type: object
          description: User ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
      required:
        - type
        - trainingId
        - trainingsCount
        - paymentType
        - userId
    CreateOrderRDO:
      type: object
      properties:
        id:
          type: string
          description: Uniq order ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        createdAt:
          format: date-time
          type: string
          description: Created at date
          example: 2024-04-26 13:02:24.847
        updatedAt:
          format: date-time
          type: string
          description: Updated at date
          example: 2024-04-26 13:02:24.847
        type:
          type: string
          description: Order type
          example: абонемент
          enum:
            - абонемент
        trainingId:
          type: object
          description: Training ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        price:
          type: object
          description: Training price on create order moment
          example: 1800
        trainingsCount:
          type: number
          description: Trainings count
          example: 15
          minimum: 1
          maximum: 50
        totalPrice:
          type: number
          description: Total order price (trainings count * price)
          example: 27000
        paymentType:
          type: string
          description: Payment type
          example: mir
          enum:
            - visa
            - mir
            - iomoney
        userId:
          type: object
          description: User ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        trainingInfo:
          description: Orders training additional info
          allOf:
            - $ref: "#/components/schemas/CreateTrainingRDO"
      required:
        - id
        - createdAt
        - updatedAt
        - type
        - trainingId
        - price
        - trainingsCount
        - totalPrice
        - paymentType
        - userId
        - trainingInfo
    UpdateOrderDTO:
      type: object
      properties:
        type:
          type: string
          description: Order type
          example: абонемент
          enum:
            - абонемент
        trainingId:
          type: object
          description: Training ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        price:
          type: object
          description: Training price on create order moment
          example: 1800
        trainingsCount:
          type: number
          description: Trainings count
          example: 15
          minimum: 1
          maximum: 50
        totalPrice:
          type: number
          description: Total order price (trainings count * price)
          example: 27000
        paymentType:
          type: string
          description: Payment type
          example: mir
          enum:
            - visa
            - mir
            - iomoney
        userId:
          type: object
          description: User ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
      required:
        - type
        - trainingId
        - price
        - trainingsCount
        - totalPrice
        - paymentType
        - userId
    CreateBalanceDTO:
      type: object
      properties:
        userId:
          type: object
          description: User ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        trainingId:
          type: object
          description: Training ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        remainingTrainingsCount:
          type: number
          description: Remaining trainings count
          example: 15
          minimum: 1
          maximum: 50
        hasTrainingStarted:
          type: boolean
          description: Whether the user has started training
          example: "false"
      required:
        - userId
        - trainingId
        - remainingTrainingsCount
        - hasTrainingStarted
    CreateBalanceRDO:
      type: object
      properties:
        id:
          type: string
          description: Uniq balance ID
          example: g83h4y0943-nv934819843-jv934h8t-n923g48n9438
        createdAt:
          format: date-time
          type: string
          description: Created at date
          example: 2024-04-26 13:02:24.847
        updatedAt:
          format: date-time
          type: string
          description: Updated at date
          example: 2024-04-26 13:02:24.847
        trainingId:
          type: object
          description: Training ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        remainingTrainingsCount:
          type: number
          description: Remaining trainings count
          example: 15
          minimum: 1
          maximum: 50
        hasTrainingStarted:
          type: boolean
          description: Whether the user has started training
          example: "false"
        trainingInfo:
          description: Orders training additional info
          allOf:
            - $ref: "#/components/schemas/CreateTrainingRDO"
      required:
        - id
        - createdAt
        - updatedAt
        - trainingId
        - remainingTrainingsCount
        - hasTrainingStarted
        - trainingInfo
    ChangeBalanceDTO:
      type: object
      properties:
        trainingId:
          type: object
          description: Training ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        userId:
          type: object
          description: User ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        amount:
          type: number
          description: How much trainings you want to add/remove from balance
          example: 15
      required:
        - trainingId
        - userId
        - amount
    UpdateBalanceDTO:
      type: object
      properties:
        userId:
          type: object
          description: User ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        trainingId:
          type: object
          description: Training ID
          example: d61ef04e-295a-41cb-a230-7e9e4570f14b
        remainingTrainingsCount:
          type: number
          description: Remaining trainings count
          example: 15
          minimum: 1
          maximum: 50
        hasTrainingStarted:
          type: boolean
          description: Whether the user has started training
          example: "false"
      required:
        - userId
        - trainingId
        - remainingTrainingsCount
        - hasTrainingStarted
