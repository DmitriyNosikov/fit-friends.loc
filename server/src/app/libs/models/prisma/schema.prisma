// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev \
// --name "Added model for Product" \
// --schema ./backend/src/app/libs/models/prisma/schema.prisma \
// --skip-generate

generator client {
  provider = "prisma-client-js"
  output = "../../../../../../node_modules/.prisma/client/"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  visa
  mir
  iomoney
}

//////////////////// USERS ////////////////////
model User {
  id                String    @id @default(uuid())
  createdAt         DateTime? @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  name              String
  email             String    @unique
  passwordHash      String    @map("password_hash")
  avatar            String?
  gender            String
  birthDate         DateTime?  @map("birth_date")
  description       String?
  location          String 
  pageBackground    String?    @map("page_background")

  role              String?
  level             String?
  trainingType      String[]  @map("training_type")
  trainingDuration  String?   @map("training_duration")
  loseCaloriesLimit Int?      @map("lose_calories_limit")
  dayCaloriesLimit  Int?      @map("day_calories_limit")
  isReadyToTraining Boolean?  @map("is_ready_to_training")

  order Order[]
  trainingReview TrainingReview[]
  refreshToken RefreshToken[]

  @@map("users")
}

model Training {
  id                String    @id @default(uuid())
  createdAt         DateTime? @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  title             String
  background        String
  userLevel         String
  trainingType      String    @map("training_type")
  trainingDuration  String    @map("training_duration")
  price             Int
  discount          Int?
  calories          Int
  description       String
  gender            String
  video             String
  rating            Int?
  trainersName      String    @map("trainers_name")
  isSpecial         Boolean?  @map("is_special")

  order Order[]
  review TrainingReview[]

  @@map("trainings")
}

model Order {
  id                      String      @id @default(uuid())
  createdAt               DateTime?   @default(now()) @map("created_at")
  updatedAt               DateTime?   @updatedAt @map("updated_at")

  type                    String
  serviceId               String      @map("service_id")
  price                   Int
  trainingsCount          Int         @map("trainings_count")
  totalPrice              Int         @map("total_price")
  paymentType             PaymentType @map("payment_type")
  userId                  String

  balance Balance?
  service Training @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("orders")
}

model Balance {
  id                      String      @id @default(uuid())
  createdAt               DateTime?   @default(now()) @map("created_at")
  updatedAt               DateTime?   @updatedAt @map("updated_at")

  orderId                 String      @unique @map("order_id")
  remainingTrainingsCount Int         @map("remaining_trainings_count")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("balances")
}

model TrainingReview {
  id                      String      @id @default(uuid())
  createdAt               DateTime?   @default(now()) @map("created_at")
  updatedAt               DateTime?   @updatedAt @map("updated_at")

  userId                  String
  trainingId              String
  rating                  Int
  text                    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  
  @@map("training_reviews")
}

model RefreshToken {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  expiresIn DateTime? @map("expires_in")
  tokenId   String    @map("token_id")
  userId    String    @map("user_id")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}